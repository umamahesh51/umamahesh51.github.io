{"version":3,"sources":["components/Dashboard/icon.png","components/Dashboard/uma.jpg","components/Dashboard/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dashboard","props","state","profile","profiles","map","user","setState","progress","this","setProfile","className","Helmet","charSet","rel","href","require","Card","Image","src","alt","wrapped","ui","Content","Header","Meta","extra","List","Item","Icon","name","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMAAAA,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,iC,2LC8D5BC,E,kDAxDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,IAHM,E,yDAOL,IAAD,OACXC,EAASC,KAAI,SAACC,GAKZ,OAJA,EAAKC,SAAS,CACZJ,QAASG,EACTE,SAAU,KAEL,O,0CAITC,KAAKC,e,+BAIL,OACE,yBAAKC,UAAU,kBACb,kBAACC,EAAA,EAAD,KACQ,0BAAMC,QAAQ,UACd,wDACA,0BAAMC,IAAI,YAAYC,KAAK,sCAC3B,0BAAMD,IAAI,OAAOC,KAAMC,EAAQ,QAErC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAKH,EAAQ,KAAcI,IAAI,WAAWC,SAAO,EAACC,IAAI,IAC7D,kBAACL,EAAA,EAAKM,QAAN,KACE,kBAACN,EAAA,EAAKO,OAAN,KAAoC,MAAtBf,KAAKP,MAAMC,QAAmBM,KAAKP,MAAMC,QAAQ,cAAgB,IAAMM,KAAKP,MAAMC,QAAQ,aAAiB,oBACzH,kBAACc,EAAA,EAAKQ,KAAN,SAAY,0BAAMd,UAAU,QAAhB,qCAAZ,KAA6E,6BAC3E,0BAAMA,UAAU,QAAQF,KAAKP,MAAMC,QAAX,KAD1B,MAGF,kBAACc,EAAA,EAAKM,QAAN,CAAcG,OAAK,GACjB,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KAAW,uBAAGb,KAAK,gEACjB,kBAACc,EAAA,EAAD,CAAMC,KAAK,aADF,aAIX,kBAACH,EAAA,EAAKC,KAAN,KAAW,uBAAGb,KAAK,uCACjB,kBAACc,EAAA,EAAD,CAAMC,KAAK,WADF,mB,GA3CHC,IAAMC,WCUfC,MAXf,WACE,OACE,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,WACb,0DAEF,kBAAC,EAAD,QCEcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e9e9ed3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.771f6784.png\";","module.exports = __webpack_public_path__ + \"static/media/uma.040187b2.jpg\";","import React from 'react';\r\nimport profiles from './profile.json';\r\nimport './styles.css'\r\nimport {List, Icon, Card, Image } from 'semantic-ui-react';\r\nimport Helmet from 'react-helmet'\r\nclass Dashboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      profile: []\r\n    };\r\n\r\n  }\r\n  setProfile() {\r\n    profiles.map((user) => {\r\n      this.setState({\r\n        profile: user,\r\n        progress: 10\r\n      })\r\n      return 1;\r\n    })\r\n  }\r\n  componentDidMount() {\r\n    this.setProfile()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Helmet>\r\n                <meta charSet=\"utf-8\" />\r\n                <title>Umamahesh's Portfolio</title>\r\n                <link rel=\"canonical\" href=\"http://www.github.com/umamahesh51\" />\r\n                <link rel=\"icon\" href={require('./icon.png')}/>\r\n        </Helmet>\r\n          <Card>\r\n            <Image src={require('./uma.jpg')} alt=\"No Image\" wrapped ui={false} />\r\n            <Card.Content>\r\n              <Card.Header>{this.state.profile != null ? (this.state.profile['first-name'] + \" \" + this.state.profile['last-name']) : (\"No Profile Found\")}</Card.Header>\r\n              <Card.Meta> <span className='date'>My mother laughed when I cried on</span>  <br></br>\r\n                <span className='date'>{this.state.profile['dob']}</span> </Card.Meta>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n              <List>\r\n                <List.Item><a href=\"https://www.linkedin.com/in/umamaheswararao-tumma-3a0050130/\">\r\n                  <Icon name='linkedin' />\r\n        LinkedIn\r\n      </a></List.Item>\r\n                <List.Item><a href=\"https://www.github.com/umamahesh51/\">\r\n                  <Icon name='github' />\r\n        Github\r\n      </a></List.Item>\r\n              </List>\r\n\r\n\r\n            </Card.Content>\r\n          </Card>\r\n        </div>\r\n    )\r\n  }\r\n\r\n}\r\nexport default Dashboard;","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"marquee\">\n        <p> This is under development</p>\n      </div>\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-less/semantic.less';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}